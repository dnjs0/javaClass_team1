2024-12-18(WED)
Ex30~35 summary

1. 객체지향 프로그래밍 (Object-Oriented Programming, OOP)
•	정의: 현실 세계를 프로그램으로 모델링할 때, 객체(Object)를 중심으로 설계하는 프로그래밍 패러다임.
•	특징: 클래스라는 설계도를 통해 객체를 만들고, 객체들 간의 상호 작용을 통해 시스템을 구현.
•	장점: 재사용성, 유지보수성, 확장성이 향상됨. (예: 클래스 재사용, 상속, 다형성 등)
“객체지향은 객체(데이터+행동)를 중심으로 프로그램을 구성한다.”

2. 객체와 클래스 (Object & Class)
•	클래스(Class): 
- 객체를 만들기 위한 설계도(청사진).
- 속성(필드)과 행동(메서드)을 정의한다.
•	객체(Object): 
- 클래스로부터 만들어낸 실체(인스턴스). 
- 실제 메모리에 존재하며 클래스에서 정의한 속성과 행동을 가진다.
중요 포인트: 클래스는 추상적 개념, 객체는 구체적 실체다.
Point 클래스(설계도) → Point p1 = new Point();로 생성한 p1(객체)

3. 클래스 선언 (Class Declaration)
•	형식:	
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
package com.test.java.obj;
public class 클래스이름 {
	멤버 변수
	멤버 메서드
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
•	규칙:
1. 클래스명은 파스칼 표기법으로 작성
2. 하나의 파일에 여러 클래스 작성 가능하지만 public 클래스는 파일명과 동일한 클래스에만 붙일 수 있다.
3. 유지보수를 위해 클래스 하나당 파일 하나를 쓰는 것을 권장.
중요 포인트: 코드의 구조화를 위해 클래스를 적절히 분리하고, 명명 규칙(세계인들의 약속)을 준수한다.

4. 객체 생성과 클래스 변수 (Object Instantiation & Class Variables)
•	객체 생성: 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
클래스명 변수명 = new 클래스명(); 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
-> 힙 메모리에 인스턴스(객체)를 생성.
•	클래스 변수: 생성된 객체를 가리키는 참조 변수. 이 참조 변수를 통해 객체의 필드와 메서드에 접근한다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
(클래스이름 == Person)
Person p1 = new Point(); 
p1.x = 100; 
p1.y = 200;
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
new 연산자로 객체를 만들고, 이를 참조하는 변수로 관리한다.

5. 클래스 구성 멤버
•	필드(Field, 멤버 변수): 객체의 상태(속성)를 저장하는 변수.
•	메서드(Method): 객체의 동작(행동)을 정의하는 함수.
•	생성자(Constructor): 객체 생성 시 초기화 작업을 하는 특별한 메서드(반환형 없음).
중요 포인트: 클래스 내부 구조를 파악해 객체의 상태와 행동을 명확히 구분하고 설계할 것.

6. 필드 선언과 사용
•	필드 선언: 클래스 블록 안에 변수 선언
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
public class Point {
    		public int x; 
    		public int y;
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
•	필드 사용: 생성한 객체를 통해 p1.x, p1.y처럼 점(.) 연산자로 접근 가능.
•	필드는 객체별로 독립적인 상태를 유지한다(각 객체마다 고유한 값).
중요 포인트: 필드는 객체 상태를 표현하는 핵심. 필드 명은 의미있게 명명할 것.

7. 메서드 선언과 호출 (Method)
•	선언:
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
public void 메서드명() {
    		System.out.println("힘내자");
}
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
•	호출: 
객체변수.메서드명()
예) p1.setName(“홍길동”);
•	메서드는 객체의 행동을 정의하며, 파라미터와 반환값을 가질 수 있다.
중요 포인트: 메서드는 객체의 기능을 구현하고, 객체 상태(필드)에 기반한 로직을 담는다.

8. 접근 제한자 (Access Modifiers)
•	종류: public, private, protected, (default)
•	public: 누구나 접근 가능
•	private: 100% 비공개, 해당 클래스 내부에서만 접근 가능 (정보은닉)
•	protected: 같은 패키지 또는 상속 관계에서 접근 가능
•	default: 같은 패키지 내에서만 접근 가능(키워드 없음)
중요 포인트: 정보은닉(Encapsulation)을 통해 불필요한 외부 접근을 막고, 데이터 무결성을 유지한다.

9. Getter와 Setter
•	정의: private 필드에 직접 접근 불가할 때 public 메서드를 통해 값을 읽고(Getter) 쓰기(Setter) 위한 메서드.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
private int price;

public int getPrice() { return this.price; }
public void setPrice(int price) { this.price = price; }
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
* 마우스 우클릭 or 변수 클릭 후 Ctrl+1 키를 통해 빠르게 생성 가능
•	장점: 필드 값 유효성 검증, 변경 시 후속 조치 가능. 외부 접근을 통제하면서도 필요한 접근을 제공.
중요 포인트: 캡슐화(정보 은닉, 보호)를 실천하고 객체의 안정적인 상태 유지에 필수적이다.


