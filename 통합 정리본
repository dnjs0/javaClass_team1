통합 정리본 (2024-12-18 수업내용 종합 요약)

이번 수업에서는 자바 기반 객체지향 프로그래밍(OOP)의 핵심 개념인 클래스와 객체에 대해 다루었다. 여러 정리본에서 공통적으로 강조된 내용과 중요한 포인트를 하나로 정리하면 다음과 같다.

객체지향 프로그래밍(OOP) 개념

정의: 현실 세계를 프로그램으로 모델링할 때 객체(Object)를 중심으로 프로그램을 구성하는 패러다임.
특징: 추상화, 캡슐화(정보 은닉), 상속, 다형성 등의 개념을 통해 재사용성, 유지보수성, 확장성을 향상시킨다.
클래스(Class)와 객체(Object)

클래스: 객체를 만들기 위한 청사진(설계도). 필드(멤버 변수)와 메서드(멤버 함수)를 정의한다.
객체(인스턴스): 클래스로부터 new 연산자를 통해 생성되는 실체. 힙(Heap) 메모리에 할당되며, 클래스에서 정의한 속성(필드)과 행동(메서드)을 실제로 가진다.
속성(필드): 객체의 상태나 특성을 저장하는 변수들.
행동(메서드): 객체가 수행할 수 있는 동작을 정의하는 함수. 필드를 조작하거나 특정 로직을 구현한다.
클래스 설계 및 선언 방법

클래스 선언 시 파스칼 표기법(예: Person, Point) 사용.
하나의 파일에는 일반적으로 하나의 public 클래스를 선언하며, 해당 클래스 이름과 파일명이 동일해야 한다.
클래스는 유지보수성과 직관성을 위해 별도 파일로 관리하는 것이 권장된다.
객체 생성과 사용 방법

객체 생성 문법:
java
코드 복사
클래스명 변수명 = new 클래스명();
생성된 객체를 통해 객체명.필드, 객체명.메서드() 형태로 접근 가능하다.
접근 지정자(Access Modifier)와 정보 은닉

종류: public(100% 공개), private(100% 비공개), protected, default(생략)
원칙:
멤버 변수(필드)는 주로 private으로 선언해 외부로부터 직접적인 접근을 막고 데이터 무결성을 유지한다.
외부 접근이 필요한 경우 public 메서드를 통해 제어된 방식으로 접근하도록 한다.
Getter/Setter 메서드 (캡슐화 실천)

private 필드에 대한 읽기 접근은 Getter, 쓰기 접근은 Setter 메서드로 제공한다.
이를 통해 필드 값을 검증하거나 특정 로직을 삽입할 수 있어 안전성과 유지보수성 향상.
this 키워드

this는 현재 객체 자기 자신을 가리키는 참조 변수.
메서드 내에서 필드명과 파라미터명이 충돌할 경우 this.필드명을 사용하여 인스턴스 변수를 가리킨다.
클래스 간 관계 형성

클래스 내에 다른 클래스 타입의 변수를 선언하여 1:1, 1:다 관계를 형성할 수 있다.
이러한 구성을 통해 복잡한 객체 구조를 모델링할 수 있다.
배열과 클래스 사용 시 차이점

배열은 인덱스(번호)로 다수의 동일한 타입 데이터를 관리하기 편리하지만, 데이터의 의미 파악이 어렵다.
클래스는 이름 붙은 필드로 구성되어 직관적으로 데이터 의미를 파악할 수 있고, 해당 데이터를 조작하는 행동(메서드)을 함께 묶어 관리 가능하다.
단, 클래스는 객체 생성의 비용이 크지만 가독성과 유지보수 측면에서 유리하다.
위와 같이, 클래스와 객체를 활용한 객체지향 프로그래밍은 코드 재사용성, 유지보수성, 확장성을 높일 수 있으며, 정보 은닉, 접근 제어, getter/setter 사용을 통해 안정적이고 신뢰성 높은 코드를 작성할 수 있다. 이러한 개념과 원칙을 준수하는 것이 향후 복잡한 프로그램을 개발할 때 핵심적인 역할을 하게 된다
