클래스(12/18)

1. 관련 용어 
- 클래스 : 데이터 구조를 만들기 위한 설계도
-  객체 or 인스턴스 : 클래스라는 설계도를 가지고 만든 데이터 구조
-  속성 : 객체의 속성
            클래스 내에서 멤버 변수로 구현
-  행동 : 객체의 행동
            클래스 내에서 메서드로 구현
            자신의 속성을 활용하여 구현하는 것이 멤버 메서드를

2. 객체를 이용할 때의 장점
- 같은 성질의 데이터를 관리하기 용이
  ex)  같은 성질의 데이터를 같은 변수이름으로 사용하지만, 각각의 객체의 속성으로 사용이 가능
	Person a = new Person();
	Person b = new Person();
	a.height = 180;
	b.height = 175;
- 배열은 첨자로 데이터의 집합을 관리를 하지만, 객체의 경우, 각각의 데이터에 의미를 부여할 수 있는 변수를 만들어 사용하기 때문에 개발자 입장에서 데이터를 구분하여 사용하기 용이.

3. 객체를 만드는 방법
(클래스명) (객체명) = (new 연산자) 생성자();

4. 클래스 이름
 - 같은 이름의 클래스를 사용할 수는 없지만, 예외적으로 서로 다른 패키지에 있을 시 사용이 가능.
 - 다른 패키지의 같은 이름의 클래스를 사용할 시 패키지명을 포함한 클래스명을 명시해야 함.
	ex) com.test.java.Size s2 = new com.test.java.Size();
 - 파일명과 public 클래스명은 반드시 동일해야 한다.


5. 접근 지정자는 클래스 또는 클래스 멤버에 대해 읽기 또는 쓰기에 대한 권한을 지정할 수 있는 키워드
6. 접근 지정자 종류
 - public :
    누구든지 접근(읽기 또는 쓰기)이 가능하다.
 - private :
    해당 클래스 멤버외에는 접근(읽기 또는 쓰기)이 불가능하다.
 - protected
 - (default)

7.  getter , setter
 - 속성이 public일 경우, 어디에서든 접근이 가능하기 때문에, 잘못된 값이 입력될 수 있어 대체로 private를 사용하고, getter 와 setter메서드를 이용하여 데이터를 읽고 쓰는 것을 권장하며, 현업에서도 관례적으로 사용하고 있다.

8. this 키워드
 - 객체 자신을 가리키는 키워드
 - 대체로 객체 자신의 클래스 멤버에 접근하기 위해 사용된다.
 - this.클래스멤버

9. 클래스 내에 참조형 변수(클래스 변수)를 만들어서, 다른 객체와의 관계를 만들어 낼 수 있다.
ex) public class child(){  private Parent father; private Parent mother; }

